{"version":3,"sources":["landlord.js"],"names":["LandlordModel","require","RenterModel","PropertyModel","RenterService","t","input","name","money","properties","landlord","post","send","body","res","get","is","status","regex","text","deepEqual","landlordID","inputLandlord","inputProperty","cost","landlordCreation","propertyCreation","propertyID","payment","newLandlord","length","inputAdding","sellerWithProperty","property","buyer","seller","buyerCreation","sellerCreation","landlordID1","landlordID2","newBuyer","newSeller","creation","inputRenter","months","renterCreation","renterID","payRent","findOne","console","log","renter","monthRent","newLandlordMoney","newRenterMoney","edit","newRenter"],"mappings":"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","file":"landlord.js","sourcesContent":["import test from 'ava'\nimport request from 'supertest'\nimport app from '../../app'\n\nconst LandlordModel = require('../../models/landlord-model')   //change to whatever model name you have\nconst RenterModel = require('../../models/renter-model')  \nconst PropertyModel = require('../../models/property-model') \nconst RenterService = require('./renter-service') //format?\n\n\ntest('Get landlord page', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n\n    const landlord = (await request(app)\n        .post('/landlord/add')\n        .send(input))\n        .body  \n\n    const res = await request(app)\n        .get('/landlord')\n    \n    t.is(res.status, 200)\n    t.regex(res.text, /Test/)\n})\n\n\n\n\ntest('Add a landlord', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n    // const input = [{name:'Test', money: 50, properties: []}]\n    //why did I have array brackets here?? and why doesn't it work without brackets??\n\n    const res = await request(app)\n        .post('/landlord/add')\n        .send(input)\n\n    t.is(res.status, 200)\n    t.is(res.body.name, input.name)\n    t.is(res.body.money, input.money)\n    t.deepEqual(res.body.properties, input.properties)\n})\n\n\ntest('Get indiv landlord page', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n\n    const landlord = (await request(app)\n        .post('/landlord/add')\n        .send(input))\n        .body\n\n    // //why did landlord come in an array? find uses findOne...\n    // console.log(landlord.landlordID)\n    \n    const res = await request(app)\n        .get(`/landlord/${landlord.landlordID}`)\n    \n    t.is(res.status, 200)\n    t.regex(res.text, /Test/)\n})\n\ntest('Add property by ID', async t => {\n    const inputLandlord = {name:'TestLL', money: 500, properties: []} //buyer\n    const inputProperty = {name:'TestP', cost: 10}\n \n    const landlordCreation = (await request(app)\n        .post('/landlord/add')\n        .send(inputLandlord))\n        .body\n\n    const propertyCreation = (await request(app)\n        .post('/property/add')\n        .send(inputProperty))\n        .body\n\n    const input = {landlordID: landlordCreation.landlordID, propertyID: propertyCreation.propertyID, payment: 0}\n\n    const res = await request(app)\n        .post('/landlord/add-property')\n        .send(input)\n    \n    const newLandlord = {landlordID: landlordCreation.landlordID, name: landlordCreation.name, money: (landlordCreation.money + input.payment), properties: [{propertyID: propertyCreation.propertyID, name:'TestP', cost: 10}]}\n\n    t.is(res.status, 200)\n    // t.is(res.body, newLandlord)   <--will this never work because the object stored via MongoDB has the extra _id and _v fields?\n    t.is(res.body.money, newLandlord.money)\n    t.is(res.body.properties.length, newLandlord.properties.length)\n    t.is(res.body.properties[0].name, newLandlord.properties[0].name)\n})\n\ntest('Remove property', async t => {\n    const inputLandlord = {name:'TestLLR', money: 500, properties: []} \n    const inputProperty = {name:'TestP', cost: 10}\n \n    const landlordCreation = (await request(app)\n        .post('/landlord/add')\n        .send(inputLandlord))\n        .body\n\n    const propertyCreation = (await request(app)\n        .post('/property/add')\n        .send(inputProperty))\n        .body\n\n    const inputAdding = {landlordID: landlordCreation.landlordID, propertyID: propertyCreation.propertyID, payment: 0}\n\n    const sellerWithProperty = (await request(app)\n        .post('/landlord/add-property')\n        .send(inputAdding))\n        .body\n    \n    t.is(sellerWithProperty.properties.length, 1)\n\n    const input = {landlord: sellerWithProperty, property: propertyCreation, payment: 0}\n\n    const res = await request(app)\n        .post('/landlord/remove-property')\n        .send(input)\n\n    const newLandlord = {landlordID: sellerWithProperty.landlordID, name: sellerWithProperty.name, money: (sellerWithProperty.money + input.payment), properties: []}\n\n    t.is(res.status, 200)\n    // t.is(res.body, newLandlord)   <--will this never work because the object stored via MongoDB has the extra _id and _v fields?\n    t.is(res.body.money, newLandlord.money)\n    t.is(res.body.properties.length, newLandlord.properties.length)\n})\n\n\ntest('Property sale', async t => {\n    const buyer = {name:'TestB', money: 500, properties: []} //buyer\n    const seller = {name:'TestS', money: 900, properties: []}\n    const inputProperty = {name:'TestP', cost: 10}\n \n    const buyerCreation = (await request(app)\n        .post('/landlord/add')\n        .send(buyer))\n        .body\n\n    const sellerCreation = (await request(app)\n        .post('/landlord/add')\n        .send(seller))\n        .body\n\n    const propertyCreation = (await request(app)\n        .post('/property/add')\n        .send(inputProperty))\n        .body\n    \n    const inputAdding = {landlordID: sellerCreation.landlordID, propertyID: propertyCreation.propertyID, payment: 0}\n\n    const sellerWithProperty = await request(app)\n        .post('/landlord/add-property')\n        .send(inputAdding)\n    \n    const input = {landlordID1: buyerCreation.landlordID, landlordID2: sellerCreation.landlordID, propertyID: propertyCreation.propertyID}\n\n    const res = await request(app)\n        .post('/landlord/sell-property')\n        .send(input)\n\n    const newBuyer = {name:'TestLL', money: 380, properties: [{name:'TestP', cost: 10}]} \n    const newSeller = {name:'TestR', money: 1020, properties: []} \n\n    t.is(res.status, 200)\n    t.is(res.body[0].money, 380)\n    t.is(res.body[1].money, 1020)\n    t.is(res.body[0].properties.length, 1)\n    t.is(res.body[1].properties.length, 0)  //fix this\n})\n\n//////// BEFORE ///////////////////\n// [ { properties: [ [Object] ],\n//     _id: '5a53617a5e748211ae5c8af5',\n//     name: 'TestLL',\n//     money: 380,\n//     landlordID: 87,\n//     __v: 1 },\n//   { properties: [ 'House' ],\n//     _id: '5a53617a5e748211ae5c8af6',\n//     name: 'TestR',\n//     money: 1020,\n//     landlordID: 88,\n//     __v: 0 } ]\n\n\n// [ { name: 'TestLL', money: 380, properties: [ 'House' ] },\n//   { name: 'TestR', money: 1020, properties: [] } ]\n\ntest('Delete a landlord', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n\n    const creation = (await request(app)\n        .post('/landlord/add')\n        .send(input))\n        .body\n\n    // const fetch = await request(app)\n    //     .get(`/landlord/${creation.landlordID}`)\n    \n    // t.is(fetch.status, 200)\n\n    const res = await request(app)\n        .post('/landlord/delete')\n        .send(creation)\n\n    t.is(res.status, 200)\n\n    // const fetch = await request(app)\n    //     .get(`/landlord/${creation.landlordID}`)\n    \n    // t.is(fetch.status, 404)\n    /*\n    const fetch = await request(app)\n        .get(`/landlord/${creation.landlordID}`)\n\n    t.is(fetch.status, 404)   --> getting 500\n    */  \n})\n\ntest('Pay rent', async t=> {\n    const inputLandlord = {name:'TestLL', money: 500, properties: []} //buyer\n    const inputProperty = {name:'TestP', cost: 10}\n    const inputRenter = {name:'TesterR', money: 50, months: ['Jan'], property: [\"House\"]}\n \n    const landlordCreation = (await request(app)\n        .post('/landlord/add')\n        .send(inputLandlord))\n        .body\n    \n\n    const propertyCreation = (await request(app)\n        .post('/property/add')\n        .send(inputProperty))\n        .body\n    \n    const renterCreation = (await request(app)\n        .post('/renter/add')\n        .send(inputRenter))\n        .body\n\n    const input = {landlordID: landlordCreation.landlordID, renterID: renterCreation.renterID, propertyID: propertyCreation.propertyID}\n    \n    // console.log(input)\n\n    const payRent = async (landlordID, renterID, propertyID) => {\n        const property = await PropertyModel.findOne({ propertyID })\n        console.log(property)\n        const landlord = await LandlordModel.findOne({ landlordID })\n        console.log(landlord)\n        const renter = await RenterModel.findOne({ renterID })\n        console.log(renter)\n        const monthRent = property.cost\n        const newLandlordMoney = landlord.money + monthRent\n        const newRenterMoney = renter.money - monthRent\n        const newLandlord = await edit(landlordID, {name: landlord.name, money: newLandlordMoney, properties: landlord.properties})\n        const newRenter = await RenterService.edit(renterID, {name: renter.name, money: newRenterMoney, months: renter.months, property: renter.property})\n        return [newLandlord, newRenter]\n    }\n\n    payRent(input.landlordID, input.renterID, input.propertyID);\n\n    const res = await request(app)\n        .post('/pay-rent')\n        .send(input)\n    \n    t.is(res.status, 200)\n})"]}
{"version":3,"sources":["landlord.js"],"names":["t","input","name","money","properties","landlord","post","send","body","res","get","is","status","regex","text","deepEqual","landlordID","inputLandlord1","inputLandlord2","inputProperty","cost","landlordCreation1","landlordCreation2","propertyCreation","landlordID1","landlordID2","propertyID","newBuyer","newSeller","console","log"],"mappings":"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","file":"landlord.js","sourcesContent":["import test from 'ava'\nimport request from 'supertest'\nimport app from '../../app'\n\ntest('Get landlord page', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n\n    const landlord = (await request(app)\n        .post('/landlord/add')\n        .send(input))\n        .body  \n\n    const res = await request(app)\n        .get('/landlord')\n    \n    t.is(res.status, 200)\n    t.regex(res.text, /Test/)\n})\n\n\n\n// test('Add a landlord', async t => {\n//     const input = {name:'Test', money: 50, properties: []}\n//     // const input = [{name:'Test', money: 50, properties: []}]\n//     //why did I have array brackets here?? and why doesn't it work without brackets??\n\n//     const res = await request(app)\n//         .post('/landlord/add')\n//         .send(input)\n\n//     console.log(res.body)\n\n//     t.is(res.status, 200)\n//     t.is(res.name, input.name)\n//     t.is(res.money, input.money)\n//     t.deepEqual(res.properties, input.properties)\n// })\n\n\ntest('Add a landlord', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n    // const input = [{name:'Test', money: 50, properties: []}]\n    //why did I have array brackets here?? and why doesn't it work without brackets??\n\n    const res = await request(app)\n        .post('/landlord/add')\n        .send(input)\n\n    // console.log(res.body)\n\n    t.is(res.status, 200)\n    t.is(res.body.name, input.name)\n    t.is(res.body.money, input.money)\n    t.deepEqual(res.body.properties, input.properties)\n})\n\n\n\n\n\ntest('Get indiv landlord page', async t => {\n    const input = {name:'Test', money: 50, properties: []}\n\n    // const landlord = (await request(app)\n    //     .post('/landlord/add')\n    //     .send(input))\n    //     .body\n    const landlord = (await request(app)\n        .post('/landlord/add')\n        .send(input))\n        .body\n    \n    // console.log(landlord)\n    // console.log(`${landlord.landlordID}`)\n    // //why did landlord come in an array? find uses findOne...\n    // console.log(landlord.landlordID)\n    \n    const res = await request(app)\n        .get(`/landlord/${landlord.landlordID}`)\n    \n    // console.log(res.text)\n\n    t.is(res.status, 200)\n    t.regex(res.text, /Test/)\n})\n\ntest('Property sale', async t => {\n    const inputLandlord1 = {name:'TestLL', money: 500, properties: []} //buyer\n    const inputLandlord2 = {name:'TestR', money: 900, properties: [\"House\"]}\n    const inputProperty = {name:'TestP', cost: 10}\n \n    const landlordCreation1 = (await request(app)\n        .post('/landlord/add')\n        .send(inputLandlord1))\n        .body\n\n    const landlordCreation2 = (await request(app)\n        .post('/landlord/add')\n        .send(inputLandlord2))\n        .body\n\n    const propertyCreation = (await request(app)\n        .post('/property/add')\n        .send(inputProperty))\n        .body\n\n    const input = {landlordID1: landlordCreation1.landlordID, landlordID2: landlordCreation2.landlordID, propertyID: propertyCreation.propertyID}\n\n    const res = await request(app)\n        .post('/landlord/sell-property')\n        .send(input)\n    \n    // console.log(res.body)\n\n    const newBuyer = {name:'TestLL', money: 380, properties: [\"House\"]} \n    const newSeller = {name:'TestR', money: 1020, properties: []} \n\n    console.log([newBuyer,newSeller])\n\n    t.is(res.status, 200)\n    // t.deepEqual(res.body, [newBuyer,newSeller])\n    t.is(res.body[0].money, 380)\n    t.is(res.body[1].money, 1020)\n})\n\n// [ { properties: [ [Object] ],\n//     _id: '5a53617a5e748211ae5c8af5',\n//     name: 'TestLL',\n//     money: 380,\n//     landlordID: 87,\n//     __v: 1 },\n//   { properties: [ 'House' ],\n//     _id: '5a53617a5e748211ae5c8af6',\n//     name: 'TestR',\n//     money: 1020,\n//     landlordID: 88,\n//     __v: 0 } ]\n\n\n// [ { name: 'TestLL', money: 380, properties: [ 'House' ] },\n//   { name: 'TestR', money: 1020, properties: [] } ]"]}
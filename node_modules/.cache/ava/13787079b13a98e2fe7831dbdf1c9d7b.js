'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('Get landlord page', async t => {
    var _rec = new _powerAssertRecorder();

    const input = { name: 'Test', money: 50, properties: [] };

    const landlord = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(input)).body;

    const res = await (0, _supertest2.default)(_app2.default).get('/landlord');

    t.is(res.status, 200);
    t.regex(_rec._expr(_rec._capt(_rec._capt(res, 'arguments/0/object').text, 'arguments/0'), {
        content: 't.regex(res.text, /Test/)',
        filepath: 'test/routes/landlord.js',
        line: 18,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"regex","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[8,11]},"property":{"type":"Identifier","name":"text","range":[12,16]},"computed":false,"range":[8,16]},{"type":"RegExpLiteral","pattern":"Test","flags":"","range":[18,24]}],"range":[0,25]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"regex","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"res","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"text","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"regexp"},"value":{"pattern":"Test","flags":""},"range":[18,24]},{"type":{"label":")"},"range":[24,25]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), /Test/);
});

(0, _ava2.default)('Add a landlord', async t => {
    const input = { name: 'Test', money: 50, properties: []
        // const input = [{name:'Test', money: 50, properties: []}]
        //why did I have array brackets here?? and why doesn't it work without brackets??

    };const res = await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(input);

    t.is(res.status, 200);
    t.is(res.body.name, input.name);
    t.is(res.body.money, input.money);
    t.deepEqual(res.body.properties, input.properties);
});

(0, _ava2.default)('Get indiv landlord page', async t => {
    var _rec2 = new _powerAssertRecorder();

    const input = { name: 'Test', money: 50, properties: [] };

    const landlord = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(input)).body;

    // //why did landlord come in an array? find uses findOne...
    // console.log(landlord.landlordID)

    const res = await (0, _supertest2.default)(_app2.default).get(`/landlord/${landlord.landlordID}`);

    t.is(res.status, 200);
    t.regex(_rec2._expr(_rec2._capt(_rec2._capt(res, 'arguments/0/object').text, 'arguments/0'), {
        content: 't.regex(res.text, /Test/)',
        filepath: 'test/routes/landlord.js',
        line: 55,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"regex","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[8,11]},"property":{"type":"Identifier","name":"text","range":[12,16]},"computed":false,"range":[8,16]},{"type":"RegExpLiteral","pattern":"Test","flags":"","range":[18,24]}],"range":[0,25]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"regex","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"res","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"text","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"regexp"},"value":{"pattern":"Test","flags":""},"range":[18,24]},{"type":{"label":")"},"range":[24,25]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), /Test/);
});

(0, _ava2.default)('Add property by ID', async t => {
    const inputLandlord = { name: 'TestLL', money: 500, properties: [] //buyer
    };const inputProperty = { name: 'TestP', cost: 10 };

    const landlordCreation = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(inputLandlord)).body;

    const propertyCreation = (await (0, _supertest2.default)(_app2.default).post('/property/add').send(inputProperty)).body;

    const input = { landlordID: landlordCreation.landlordID, propertyID: propertyCreation.propertyID, payment: 0 };

    const res = await (0, _supertest2.default)(_app2.default).post('/landlord/add-property').send(input);

    const newLandlord = { landlordID: landlordCreation.landlordID, name: landlordCreation.name, money: landlordCreation.money + input.payment, properties: [{ propertyID: propertyCreation.propertyID, name: 'TestP', cost: 10 }] };

    t.is(res.status, 200);
    // t.is(res.body, newLandlord)   <--will this never work because the object stored via MongoDB has the extra _id and _v fields?
    t.is(res.body.money, newLandlord.money);
    t.is(res.body.properties.length, newLandlord.properties.length);
    t.is(res.body.properties[0].name, newLandlord.properties[0].name);
});

(0, _ava2.default)('Remove property', async t => {
    const inputLandlord = { name: 'TestLLR', money: 500, properties: [] };
    const inputProperty = { name: 'TestP', cost: 10 };

    const landlordCreation = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(inputLandlord)).body;

    const propertyCreation = (await (0, _supertest2.default)(_app2.default).post('/property/add').send(inputProperty)).body;

    const inputAdding = { landlordID: landlordCreation.landlordID, propertyID: propertyCreation.propertyID, payment: 0 };

    const sellerWithProperty = (await (0, _supertest2.default)(_app2.default).post('/landlord/add-property').send(inputAdding)).body;

    t.is(sellerWithProperty.properties.length, 1);

    const input = { landlord: sellerWithProperty, property: propertyCreation, payment: 0 };

    const res = await (0, _supertest2.default)(_app2.default).post('/landlord/remove-property').send(input);

    const newLandlord = { landlordID: sellerWithProperty.landlordID, name: sellerWithProperty.name, money: sellerWithProperty.money + input.payment, properties: [] };

    t.is(res.status, 200);
    // t.is(res.body, newLandlord)   <--will this never work because the object stored via MongoDB has the extra _id and _v fields?
    t.is(res.body.money, newLandlord.money);
    t.is(res.body.properties.length, newLandlord.properties.length);
});

(0, _ava2.default)('Property sale', async t => {
    const buyer = { name: 'TestB', money: 500, properties: [] //buyer
    };const seller = { name: 'TestS', money: 900, properties: [] };
    const inputProperty = { name: 'TestP', cost: 10 };

    const buyerCreation = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(buyer)).body;

    const sellerCreation = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(seller)).body;

    const propertyCreation = (await (0, _supertest2.default)(_app2.default).post('/property/add').send(inputProperty)).body;

    const inputAdding = { landlordID: sellerCreation.landlordID, propertyID: propertyCreation.propertyID, payment: 0 };

    const sellerWithProperty = await (0, _supertest2.default)(_app2.default).post('/landlord/add-property').send(inputAdding);

    const input = { landlordID1: buyerCreation.landlordID, landlordID2: sellerCreation.landlordID, propertyID: propertyCreation.propertyID };

    const res = await (0, _supertest2.default)(_app2.default).post('/landlord/sell-property').send(input);

    const newBuyer = { name: 'TestLL', money: 380, properties: [{ name: 'TestP', cost: 10 }] };
    const newSeller = { name: 'TestR', money: 1020, properties: [] };

    t.is(res.status, 200);
    t.is(res.body[0].money, 380);
    t.is(res.body[1].money, 1020);
    t.is(res.body[0].properties.length, 1);
    t.is(res.body[1].properties.length, 0); //fix this
});

//////// BEFORE ///////////////////
// [ { properties: [ [Object] ],
//     _id: '5a53617a5e748211ae5c8af5',
//     name: 'TestLL',
//     money: 380,
//     landlordID: 87,
//     __v: 1 },
//   { properties: [ 'House' ],
//     _id: '5a53617a5e748211ae5c8af6',
//     name: 'TestR',
//     money: 1020,
//     landlordID: 88,
//     __v: 0 } ]


// [ { name: 'TestLL', money: 380, properties: [ 'House' ] },
//   { name: 'TestR', money: 1020, properties: [] } ]

(0, _ava2.default)('Delete a landlord', async t => {
    const input = { name: 'Test', money: 50, properties: [] };

    const creation = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(input)).body;

    // const fetch = await request(app)
    //     .get(`/landlord/${creation.landlordID}`)

    // t.is(fetch.status, 200)

    const res = await (0, _supertest2.default)(_app2.default).post('/landlord/delete').send(creation);

    t.is(res.status, 200);

    // const fetch = await request(app)
    //     .get(`/landlord/${creation.landlordID}`)

    // t.is(fetch.status, 404)
    /*
    const fetch = await request(app)
        .get(`/landlord/${creation.landlordID}`)
     t.is(fetch.status, 404)   --> getting 500
    */
});

(0, _ava2.default)('Pay rent', async t => {
    const inputLandlord = { name: 'TestLL', money: 500, properties: [] //buyer
    };const inputProperty = { name: 'TestP', cost: 10 };
    const inputRenter = { name: 'TesterR', money: 50, months: ['Jan'], property: ["House"] };

    const landlordCreation = (await (0, _supertest2.default)(_app2.default).post('/landlord/add').send(inputLandlord)).body;

    const propertyCreation = (await (0, _supertest2.default)(_app2.default).post('/property/add').send(inputProperty)).body;

    const renterCreation = (await (0, _supertest2.default)(_app2.default).post('/renter/add').send(inputRenter)).body;

    const input = { landlordID: landlordCreation.landlordID, renterID: renterCreation.renterID, propertyID: propertyCreation.propertyID };

    const res = await (0, _supertest2.default)(_app2.default).post('/landlord/pay-rent').send(input);

    t.is(res.status, 200);
});
//# sourceMappingURL=../../node_modules/.cache/ava/13787079b13a98e2fe7831dbdf1c9d7b.js.map